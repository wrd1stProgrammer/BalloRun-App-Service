name: Build and Push Docker Image to Docker Hub and Deploy to EC2

on:
  push:
    branches:
      - sub  # sub 브랜치에 푸시 시 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create service account key file
        run: |
          echo "${{ secrets.SERVICE_ACCOUNT_KEY }}" | base64 -d > back/campuscoffee-83cbf-74f467acc07d.json
        shell: bash

      - name: Verify service account key file
        run: |
          cat back/campuscoffee-83cbf-74f467acc07d.json
          if ! jq . back/campuscoffee-83cbf-74f467acc07d.json >/dev/null 2>&1; then
            echo "Invalid JSON in service account key file"
            exit 1
          fi
        shell: bash
        
      # 2. Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t sikgates/newimage:latest ./back

      # 4. Docker Hub에 푸시
      - name: Push Docker Image
        run: |
          docker push sikgates/newimage:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    # 1. 코드 체크아웃 (최신 docker-compose.yml 가져오기)
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. docker-compose.yml 파일을 EC2로 전송
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/eighteen/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3  # 안정 버전
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          #debug: true  # 디버깅 활성화
          script: |
            # 디렉토리 이동 (파일 위치 확인 필요)
            cd /home/ubuntu/eighteen || { echo "Directory not found"; exit 1; }
            # 기존 컨테이너 및 네트워크 정리
            sudo docker-compose down || { echo "docker-compose down failed"; exit 1; }
            sudo docker-compose rm -f
            # 기존 이미지 삭제
            sudo docker rmi -f sikgates/newimage:latest
            sudo docker rmi -f sikgates/devimage:utc  # 기존 이미지 삭제
            sudo docker-compose pull
            # 컨테이너 재실행
            sudo docker-compose up -d || { echo "docker-compose up failed"; exit 1; }
            echo "Deployment completed successfully."